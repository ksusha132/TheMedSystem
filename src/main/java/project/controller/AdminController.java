package project.controller;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import project.repository.RoleRepository;
import project.repository.UserRepository;
import project.services.UserService;
import project.repository.ContactTypeRepository;
import project.dto.ContactInfoDTO;
import project.dto.UserDTO;
import project.model.ContactInfo;
import project.model.ContactType;
import project.model.Role;
import project.model.User;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@Transactional
@RequestMapping(path = "/admin") // This means URL's start with /demo (after Application path)
public class AdminController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private ContactTypeRepository contactTypeRepository;

    @Autowired
    PasswordEncoder passwordEncoder;

    @Autowired
    private SessionFactory sessionFactory;
    
    @Autowired
    private UserService userService;


    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    @PostMapping(path = "/delete_user/{id_user}")
    public
    @ResponseBody
     String deleteUser(@PathVariable Long id_user) {
        User user = userRepository.findOne(id_user);
        userRepository.delete(user);
        return "deleted";
    }

    @GetMapping(path = "/user/{id_user}")
    public String getUser(Model model, @PathVariable Long id_user) {
        UserDTO userDTO = userService.getUserDTO(id_user);
        Iterable<ContactType> contactTypeList = contactTypeRepository.findAll();
        model.addAttribute("user", userDTO);
        model.addAttribute("contact_types", contactTypeList);
        return "user";
    }

    @GetMapping(path = "/all")
    public String getAllUsers(Model model) {

        List<UserDTO> usersDTO = userService.getAllUsers();
        model.addAttribute("users", usersDTO);
        return "all";

    }
}